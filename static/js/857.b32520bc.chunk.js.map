{"version":3,"file":"static/js/857.b32520bc.chunk.js","mappings":"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","sources":["routes/Index/components/CardHeaderActions.tsx","routes/Index/index.tsx"],"sourcesContent":["import DeleteIcon from \"@mui/icons-material/Delete\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport {\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport React from \"react\";\n\ntype CardHeaderActionsProps = {\n  id: number;\n\n  onRefresh: (id: number) => void;\n  onDelete: (id: number) => void;\n};\n\nconst CardHeaderActions: React.FC<CardHeaderActionsProps> = ({\n  id,\n  onRefresh,\n  onDelete,\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const isMenuOpen = Boolean(anchorEl);\n\n  const handleMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <IconButton onClick={handleMenuClick}>\n        <MoreVertIcon />\n      </IconButton>\n\n      <Menu anchorEl={anchorEl} open={isMenuOpen} onClose={handleMenuClose}>\n        <MenuItem\n          onClick={() => {\n            onRefresh(id);\n            setAnchorEl(null);\n          }}\n        >\n          <ListItemIcon>\n            <RefreshIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Refresh</ListItemText>\n        </MenuItem>\n\n        <MenuItem\n          onClick={() => {\n            onDelete(id);\n            setAnchorEl(null);\n          }}\n        >\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Delete</ListItemText>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default CardHeaderActions;\n","import SearchIcon from \"@mui/icons-material/Search\";\nimport { Masonry } from \"@mui/lab\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  CardMedia,\n  Container,\n  IconButton,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\nimport fromUnixTime from \"date-fns/fromUnixTime\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CardHeaderActions from \"src/routes/Index/components/CardHeaderActions\";\nimport weatherSlice from \"src/routes/Index/weatherSlice\";\nimport {\n  fetchWeatherDataByCityId,\n  fetchWeatherDataByCityName,\n} from \"src/routes/Index/weatherThunks\";\nimport { useAppDispatch, useAppSelector } from \"src/store\";\n\nconst IndexRoute: React.FC = () => {\n  const searchCity = useAppSelector((state) => state.weather.searchCity);\n  const weatherData = useAppSelector((state) => state.weather.weatherData);\n  const citiesImages = useAppSelector((state) => state.weather.citiesImages);\n\n  const dispatch = useAppDispatch();\n\n  const handleAddCity = () => {\n    dispatch(fetchWeatherDataByCityName(searchCity));\n  };\n\n  const handleCityWeatherDataRefresh = (id: number) => {\n    dispatch(fetchWeatherDataByCityId(id));\n  };\n\n  const handleCityDelete = (id: number) => {\n    dispatch(weatherSlice.actions.deleteCity(id));\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n          <TextField\n            label=\"City name\"\n            placeholder=\"Input city name...\"\n            helperText=\"You can use Enter to submit\"\n            value={searchCity}\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") {\n                event.preventDefault();\n                handleAddCity();\n              }\n            }}\n            onChange={({ target: { value } }) => {\n              dispatch(weatherSlice.actions.setCitySearch(value));\n            }}\n            fullWidth\n          />\n\n          <IconButton edge=\"end\" onClick={handleAddCity}>\n            <SearchIcon />\n          </IconButton>\n        </Stack>\n      </Container>\n\n      <Box my={2} />\n\n      <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={2}>\n        {weatherData.map((item) => (\n          <Card key={item.id}>\n            <CardHeader\n              avatar={\n                <Avatar\n                  src={`https://openweathermap.org/img/wn/${item.weather?.[0]?.icon}@2x.png`}\n                >\n                  Weather Icon\n                </Avatar>\n              }\n              title={item.name}\n              subheader={`Updated ${formatDistanceToNow(fromUnixTime(item.dt), {\n                addSuffix: true,\n              })}`}\n              action={\n                <CardHeaderActions\n                  id={item.id}\n                  onRefresh={handleCityWeatherDataRefresh}\n                  onDelete={handleCityDelete}\n                />\n              }\n            />\n            <CardMedia\n              component=\"img\"\n              height=\"194\"\n              image={citiesImages[item.id]}\n              alt=\"City image\"\n            />\n            <CardActions>\n              <Button size=\"small\" component={Link} to={`/details/${item.id}`}>\n                Details\n              </Button>\n            </CardActions>\n          </Card>\n        ))}\n      </Masonry>\n    </>\n  );\n};\n\nexport default IndexRoute;\n"],"names":["id","onRefresh","onDelete","React","anchorEl","setAnchorEl","isMenuOpen","Boolean","IconButton","onClick","event","currentTarget","MoreVert","Menu","open","onClose","MenuItem","ListItemIcon","Refresh","fontSize","ListItemText","Delete","searchCity","useAppSelector","state","weather","weatherData","citiesImages","dispatch","useAppDispatch","handleAddCity","fetchWeatherDataByCityName","handleCityWeatherDataRefresh","fetchWeatherDataByCityId","handleCityDelete","weatherSlice","Container","maxWidth","Stack","direction","alignItems","spacing","TextField","label","placeholder","helperText","value","onKeyDown","key","preventDefault","onChange","target","fullWidth","edge","Search","Box","my","Masonry","columns","xs","sm","md","map","item","Card","CardHeader","avatar","Avatar","src","icon","title","name","subheader","formatDistanceToNow","fromUnixTime","dt","addSuffix","action","CardMedia","component","height","image","alt","CardActions","Button","size","Link","to"],"sourceRoot":""}