{"version":3,"file":"static/js/132.68af14e4.chunk.js","mappings":"+VA6BA,EAnB0C,SAAC,GAAD,IAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,KAAjB,OACxC,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,OAAQ,EACRC,eAAgB,SAChBC,WAAY,UANhB,WASE,SAACC,EAAA,EAAD,CAAST,MAAOA,EAAOU,UAAU,MAAjC,UACE,0BACE,SAACT,EAAD,CAAME,GAAI,CAAEQ,SAAU,GAAIC,MAAO,uBAGrC,yBAAMb,Q,kBCwFV,EA3F+B,WAAO,IAAD,MAC7Bc,GAAWC,EAAAA,EAAAA,MAETC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,KAAe,SAACC,GAAD,OAC9BA,EAAMC,QAAQC,YAAYC,MAAK,qBAAGC,GAAYC,aAAeT,QAEzDU,GAAYP,EAAAA,EAAAA,KAAe,SAACC,GAAD,OAC/BJ,EAASI,EAAMC,QAAQM,aAAaC,SAASZ,EAAQ,UAAOa,KAG9D,OACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CACEC,UAAU,MACVC,OAAO,MACPC,MAAOR,EACPS,IAAI,gBAGN,UAACC,EAAA,EAAD,YACE,UAACjC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTI,WAAY,SACZD,eAAgB,iBAJpB,WAOE,UAACL,EAAA,EAAD,YACE,SAACkC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAU,MAAnC,gBACGd,QADH,IACGA,OADH,EACGA,EAAUqB,QAEJ,OAARrB,QAAQ,IAARA,OAAA,EAAAA,EAAUsB,MACT,UAACH,EAAA,EAAD,CAAYC,QAAQ,UAApB,0BACgB,KACbG,EAAAA,EAAAA,IAAoBC,EAAAA,EAAAA,GAAaxB,EAASsB,IAAK,CAC9CG,WAAW,WAMnB,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAS,WACH9B,GACFF,GAASiC,EAAAA,EAAAA,GAAyBnB,SAASZ,EAAQ,OAJzD,UAQE,SAACgC,EAAA,EAAD,UAIJ,SAAC7C,EAAA,EAAD,CAAK8C,GAAI,KAET,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,EAAD,CACErD,MAAM,cACND,OAAO,uCAAGkB,QAAH,IAAGA,GAAH,UAAGA,EAAUqC,YAAb,aAAG,EAAgBC,KAAnB,WACPtD,KAAMuD,EAAAA,OAGV,SAACP,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,EAAD,CACErD,MAAM,aACNC,KAAMwD,EAAAA,EACN1D,MAAK,iBAAKkB,QAAL,IAAKA,GAAL,UAAKA,EAAUyC,YAAf,aAAK,EAAgBC,MAArB,mBAGT,SAACV,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,EAAD,CACErD,MAAM,aACNC,KAAM2D,EAAAA,EACN7D,MAAK,iBAAKkB,QAAL,IAAKA,OAAL,EAAKA,EAAU4C,WAAf,gBAGT,SAACZ,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,EAAD,CACErD,MAAM,WACNC,KAAM6D,EAAAA,EACN/D,MAAK,iBAAKkB,QAAL,IAAKA,GAAL,UAAKA,EAAUqC,YAAf,aAAK,EAAgBS,SAArB","sources":["routes/Details/components/StatInfo.tsx","routes/Details/index.tsx"],"sourcesContent":["import { Box, SvgIcon, Tooltip } from \"@mui/material\";\nimport React from \"react\";\n\ntype StatInfoProps = {\n  Icon: typeof SvgIcon;\n  title: string;\n  // eslint-disable-next-line react/require-default-props\n  label?: React.ReactNode;\n};\n\nconst StatInfo: React.FC<StatInfoProps> = ({ label, title, Icon }) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      rowGap: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}\n  >\n    <Tooltip title={title} placement=\"top\">\n      <div>\n        <Icon sx={{ fontSize: 72, color: \"primary.main\" }} />\n      </div>\n    </Tooltip>\n    <div>{label}</div>\n  </Box>\n);\n\nexport default StatInfo;\n","import { Refresh } from \"@mui/icons-material\";\nimport AirIcon from \"@mui/icons-material/Air\";\nimport CompressIcon from \"@mui/icons-material/Compress\";\nimport ThermostatIcon from \"@mui/icons-material/Thermostat\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n  Grid,\n  IconButton,\n  Typography,\n} from \"@mui/material\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\nimport fromUnixTime from \"date-fns/fromUnixTime\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport StatInfo from \"src/routes/Details/components/StatInfo\";\nimport { fetchWeatherDataByCityId } from \"src/routes/Index/weatherThunks\";\nimport { useAppDispatch, useAppSelector } from \"src/store\";\n\nconst DetailsRoute: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const { cityId } = useParams<{ cityId: string }>();\n  const cityData = useAppSelector((state) =>\n    state.weather.weatherData.find(({ id }) => id.toString() === cityId)\n  );\n  const cityImage = useAppSelector((state) =>\n    cityId ? state.weather.citiesImages[parseInt(cityId, 10)] : undefined\n  );\n\n  return (\n    <Card>\n      <CardMedia\n        component=\"img\"\n        height=\"340\"\n        image={cityImage}\n        alt=\"city image\"\n      />\n\n      <CardContent>\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Box>\n            <Typography variant=\"h5\" component=\"div\">\n              {cityData?.name}\n            </Typography>\n            {cityData?.dt && (\n              <Typography variant=\"caption\">\n                last updated:{\" \"}\n                {formatDistanceToNow(fromUnixTime(cityData.dt), {\n                  addSuffix: true,\n                })}\n              </Typography>\n            )}\n          </Box>\n\n          <IconButton\n            size=\"large\"\n            onClick={() => {\n              if (cityId) {\n                dispatch(fetchWeatherDataByCityId(parseInt(cityId, 10)));\n              }\n            }}\n          >\n            <Refresh />\n          </IconButton>\n        </Box>\n\n        <Box my={4} />\n\n        <Grid container spacing={2}>\n          <Grid item md={3}>\n            <StatInfo\n              title=\"Temperature\"\n              label={<>{cityData?.main?.temp}&deg;C</>}\n              Icon={ThermostatIcon}\n            />\n          </Grid>\n          <Grid item md={3}>\n            <StatInfo\n              title=\"Wind speed\"\n              Icon={AirIcon}\n              label={`${cityData?.wind?.speed} meter/sec`}\n            />\n          </Grid>\n          <Grid item md={3}>\n            <StatInfo\n              title=\"Visibility\"\n              Icon={VisibilityIcon}\n              label={`${cityData?.visibility} meters`}\n            />\n          </Grid>\n          <Grid item md={3}>\n            <StatInfo\n              title=\"Pressure\"\n              Icon={CompressIcon}\n              label={`${cityData?.main?.pressure} hPa`}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DetailsRoute;\n"],"names":["label","title","Icon","Box","sx","display","flexDirection","rowGap","justifyContent","alignItems","Tooltip","placement","fontSize","color","dispatch","useAppDispatch","cityId","useParams","cityData","useAppSelector","state","weather","weatherData","find","id","toString","cityImage","citiesImages","parseInt","undefined","Card","CardMedia","component","height","image","alt","CardContent","Typography","variant","name","dt","formatDistanceToNow","fromUnixTime","addSuffix","IconButton","size","onClick","fetchWeatherDataByCityId","Refresh","my","Grid","container","spacing","item","md","main","temp","ThermostatIcon","AirIcon","wind","speed","VisibilityIcon","visibility","CompressIcon","pressure"],"sourceRoot":""}